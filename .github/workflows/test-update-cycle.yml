# This workflow will install Python dependencies, lint with a variety of Python versions
# Based on github's default "Python package" workflow.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# And https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#using-ruff-to-lint-code

name: Test update cycle

on: [push]

jobs:
  build:

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt --upgrade
        pip install -r requirements.txt --upgrade
    - name: lint with ruff
      run: ruff --output-format=github .
    - name: add src to python path
      run: Add-Content -Path $Env:GITHUB_ENV -Value "PYTHONPATH=$Env:PYTHONPATH;.\src"
    - run: $Env:PYTHONPATH
    - name: initialize tufup repository
      run: python repo_init.py
    - name: create my_app v1.0 bundle using pyinstaller
      run: cmd.exe /c .\create_pyinstaller_bundle_win.bat
    - name: add my_app v1.0 to tufup repository
      run: python repo_add_bundle.py
    - name: mock install my_app v1.0
      run: |
        $Env:MYAPP_INSTALL_DIR = ".\my_app"
        Add-Content -Path $Env:GITHUB_ENV -Value "MYAPP_INSTALL_DIR=$Env:MYAPP_INSTALL_DIR"
        New-Item -Path $Env:MYAPP_INSTALL_DIR -ItemType "directory"
        Move-Item -Path ".\temp\dist\main" -Destination $Env:MYAPP_INSTALL_DIR
    - name: mock develop my_app v2.0
      shell: python
      run: |
        import pathlib
        settings_path = pathlib.Path('.\src\myapp\settings.py')
        settings_text = settings_path.read_text().replace('1.0', '2.0')
        settings_path.write_text(settings_text)
#    - run: cat .\src\myapp\settings.py
    - name: create my_app v2.0 bundle using pyinstaller
      run: cmd.exe /c .\create_pyinstaller_bundle_win.bat
    - name: add my_app v2.0 to tufup repository
      run: python repo_add_bundle.py
    - name: run update server and update my_app from v1 to v2
      run: |
        python -m http.server -d .\temp\repository &
        sleep 5
        & "$Env:MYAPP_INSTALL_DIR\main\main.exe"
